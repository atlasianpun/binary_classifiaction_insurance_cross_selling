{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"},{"sourceId":8633466,"sourceType":"datasetVersion","datasetId":5169686}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"##Required packages \n\n#Generic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport gc\nimport os\nimport warnings\nimport ydata_profiling as dp\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing imporu8t StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import KFold\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\n\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,Lasso\nfrom sklearn.metrics import roc_auc_score,accuracy_score\nfrom sklearn.model_selection import KFold,StratifiedKFold,RepeatedStratifiedKFold,GridSearchCV\nfrom sklearn.cluster import KMeans\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom hyperopt import hp, tpe, fmin, Trials\n\n\nwarnings.filterwarnings('ignore')\ngc.enable()\n%matplotlib inline\n\n#Setting up display options for pandas dataframe\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-03T08:16:15.379295Z","iopub.execute_input":"2024-07-03T08:16:15.379662Z","iopub.status.idle":"2024-07-03T08:16:24.293415Z","shell.execute_reply.started":"2024-07-03T08:16:15.379632Z","shell.execute_reply":"2024-07-03T08:16:24.292293Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"\ndef feature_summary(df_fa):\n    # Print the shape of the DataFrame\n    print('DataFrame shape')\n    print('rows:', df_fa.shape[0])  # Number of rows\n    print('cols:', df_fa.shape[1])  # Number of columns\n    \n    # Define the list of summary metrics\n    col_list = ['null', 'unique_count', 'data_type', 'max/min', 'mean', 'median', 'mode', 'std', 'skewness', 'sample_values']\n    \n    # Create an empty DataFrame to store the summary, using the columns of df_fa as index\n    df = pd.DataFrame(index=df_fa.columns, columns=col_list)\n    \n    # Calculate the number of null values for each column\n    df['null'] = list([len(df_fa[col][df_fa[col].isnull()]) for i, col in enumerate(df_fa.columns)])\n    \n    # Calculate the number of unique values for each column\n    df['unique_count'] = list([len(df_fa[col].unique()) for i, col in enumerate(df_fa.columns)])\n    \n    # Record the data type of each column\n    df['data_type'] = list([df_fa[col].dtype for i, col in enumerate(df_fa.columns)])\n    \n    # Iterate over each column to compute additional statistics based on data type\n    for i, col in enumerate(df_fa.columns):\n        # If the column is numeric (float or int)\n        if 'float' in str(df_fa[col].dtype) or 'int' in str(df_fa[col].dtype):\n            # Calculate max and min values, rounded to 2 decimal places\n            df.at[col, 'max/min'] = str(round(df_fa[col].max(), 2)) + '/' + str(round(df_fa[col].min(), 2))\n            # Calculate mean, median, mode, standard deviation, and skewness, rounded to 4 decimal places\n            df.at[col, 'mean'] = round(df_fa[col].mean(), 4)\n            df.at[col, 'median'] = round(df_fa[col].median(), 4)\n            df.at[col, 'mode'] = round(df_fa[col].mode()[0], 4)\n            df.at[col, 'std'] = round(df_fa[col].std(), 4)\n            df.at[col, 'skewness'] = round(df_fa[col].skew(), 4)\n        # If the column is of datetime type\n        elif 'datetime64[ns]' in str(df_fa[col].dtype):\n            # Calculate max and min dates\n            df.at[col, 'max/min'] = str(df_fa[col].max()) + '/' + str(df_fa[col].min())\n        \n        # For all columns, store a sample of up to 20 unique values\n        df.at[col, 'sample_values'] = list(df_fa[col].unique()[0:20])\n    \n    # Display the first few rows of the input DataFrame\n    display(df_fa.head())\n    \n    # Return the summary DataFrame with NaN values filled with '-'\n    return df.fillna('-')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:24.295357Z","iopub.execute_input":"2024-07-03T08:16:24.295760Z","iopub.status.idle":"2024-07-03T08:16:24.309514Z","shell.execute_reply.started":"2024-07-03T08:16:24.295721Z","shell.execute_reply":"2024-07-03T08:16:24.308407Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"\ndef feature_compare(df_fa, df_ft):\n    # Print the shape of the train DataFrame\n    print('Train DataFrame shape')\n    print('rows:', df_fa.shape[0])  # Number of rows in the train DataFrame\n    print('cols:', df_fa.shape[1])  # Number of columns in the train DataFrame\n    \n    # Print the shape of the test DataFrame\n    print('Test DataFrame shape')\n    print('rows:', df_ft.shape[0])  # Number of rows in the test DataFrame\n    print('cols:', df_ft.shape[1])  # Number of columns in the test DataFrame\n    \n    # Define the list of summary metrics to be calculated\n    col_list = ['null', 'unique_count', 'data_type', 'max/min', 'mean', 'median', 'mode', 'std', 'skewness', 'sample_values']\n    \n    # Create a MultiIndex DataFrame to store the summary statistics\n    # The index is a combination of the columns from df_fa and a level indicating 'train' or 'test'\n    df = pd.DataFrame(index=pd.MultiIndex.from_product([df_fa.columns, ['train', 'test']], names=['features', 'dataset']), columns=col_list)\n    \n    # Calculate the number of null values for each column in the train DataFrame\n    df.loc[(slice(None), ['train']), 'null'] = list([len(df_fa[col][df_fa[col].isnull()]) for i, col in enumerate(df_fa.columns)])\n    \n    # Calculate the number of null values for each column in the test DataFrame\n    df.loc[(slice(None), ['test']), 'null'] = list([len(df_ft[col][df_ft[col].isnull()]) for i, col in enumerate(df_ft.columns)])\n    \n    # Calculate the number of unique values for each column in the train DataFrame\n    df.loc[(slice(None), ['train']), 'unique_count'] = list([len(df_fa[col].unique()) for i, col in enumerate(df_fa.columns)])\n    \n    # Calculate the number of unique values for each column in the test DataFrame\n    df.loc[(slice(None), ['test']), 'unique_count'] = list([len(df_ft[col].unique()) for i, col in enumerate(df_ft.columns)])\n    \n    # Record the data type of each column in the train DataFrame\n    df.loc[(slice(None), ['train']), 'data_type'] = list([df_fa[col].dtype for i, col in enumerate(df_fa.columns)])\n    \n    # Record the data type of each column in the test DataFrame\n    df.loc[(slice(None), ['test']), 'data_type'] = list([df_ft[col].dtype for i, col in enumerate(df_ft.columns)])\n    \n    # Iterate over each column in the train DataFrame to compute additional statistics based on data type\n    for i, col in enumerate(df_fa.columns):\n        # If the column is numeric (float or int)\n        if 'float' in str(df_fa[col].dtype) or 'int' in str(df_fa[col].dtype):\n            # Calculate max and min values, rounded to 2 decimal places\n            df.loc[([col], ['train']), 'max/min'] = str(round(df_fa[col].max(), 2)) + '/' + str(round(df_fa[col].min(), 2))\n            # Calculate mean, median, mode, standard deviation, and skewness, rounded to 4 decimal places\n            df.loc[([col], ['train']), 'mean'] = round(df_fa[col].mean(), 4)\n            df.loc[([col], ['train']), 'median'] = round(df_fa[col].median(), 4)\n            df.loc[([col], ['train']), 'mode'] = round(df_fa[col].mode()[0], 4)\n            df.loc[([col], ['train']), 'std'] = round(df_fa[col].std(), 4)\n            df.loc[([col], ['train']), 'skewness'] = round(df_fa[col].skew(), 4)\n        # If the column is of datetime type\n        elif 'datetime64[ns]' in str(df_fa[col].dtype):\n            # Calculate max and min dates\n            df.loc[([col], ['train']), 'max/min'] = str(df_fa[col].max()) + '/' + str(df_fa[col].min())\n        # Store a sample of up to 20 unique values from the column\n        df.loc[([col], ['train']), 'sample_values'] = str(list(df_fa[col].unique()[0:20]))\n    \n    # Iterate over each column in the test DataFrame to compute additional statistics based on data type\n    for i, col in enumerate(df_ft.columns):\n        # If the column is numeric (float or int)\n        if 'float' in str(df_fa[col].dtype) or 'int' in str(df_fa[col].dtype):\n            # Calculate max and min values, rounded to 2 decimal places\n            df.loc[([col], ['test']), 'max/min'] = str(round(df_ft[col].max(), 2)) + '/' + str(round(df_ft[col].min(), 2))\n            # Calculate mean, median, mode, standard deviation, and skewness, rounded to 4 decimal places\n            df.loc[([col], ['test']), 'mean'] = round(df_ft[col].mean(), 4)\n            df.loc[([col], ['test']), 'median'] = round(df_ft[col].median(), 4)\n            df.loc[([col], ['test']), 'mode'] = round(df_ft[col].mode()[0], 4)\n            df.loc[([col], ['test']), 'std'] = round(df_ft[col].std(), 4)\n            df.loc[([col], ['test']), 'skewness'] = round(df_ft[col].skew(), 4)\n        # If the column is of datetime type\n        elif 'datetime64[ns]' in str(df_fa[col].dtype):\n            # Calculate max and min dates\n            df.loc[([col], ['test']), 'max/min'] = str(df_ft[col].max()) + '/' + str(df_ft[col].min())\n        # Store a sample of up to 15 unique values from the column\n        df.loc[([col], ['test']), 'sample_values'] = str(list(df_ft[col].unique()[0:15]))\n    \n    # Return the summary DataFrame with NaN values filled with '-'\n    return df.fillna('-')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:24.311214Z","iopub.execute_input":"2024-07-03T08:16:24.312184Z","iopub.status.idle":"2024-07-03T08:16:24.337856Z","shell.execute_reply.started":"2024-07-03T08:16:24.312144Z","shell.execute_reply":"2024-07-03T08:16:24.336599Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv')\ndf_test  = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:24.340514Z","iopub.execute_input":"2024-07-03T08:16:24.341141Z","iopub.status.idle":"2024-07-03T08:16:56.718487Z","shell.execute_reply.started":"2024-07-03T08:16:24.341100Z","shell.execute_reply":"2024-07-03T08:16:56.717331Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Name of the column to be set as the index\nid_column = 'id'\n\n# Remove the column and set it as the index for df_train\ndf_train.set_index(id_column, inplace=True)\n\n# Remove the column and set it as the index for df_test\ndf_test.set_index(id_column, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:56.720473Z","iopub.execute_input":"2024-07-03T08:16:56.720992Z","iopub.status.idle":"2024-07-03T08:16:56.737519Z","shell.execute_reply.started":"2024-07-03T08:16:56.720954Z","shell.execute_reply":"2024-07-03T08:16:56.736034Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Rename the column 'Response' to 'Target' in the DataFrame df_test\ndf_train.rename(columns={'Response': 'Target'}, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:56.739161Z","iopub.execute_input":"2024-07-03T08:16:56.739854Z","iopub.status.idle":"2024-07-03T08:16:56.761379Z","shell.execute_reply.started":"2024-07-03T08:16:56.739811Z","shell.execute_reply":"2024-07-03T08:16:56.759978Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Initialize the LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# List of columns that are categorical\ncategorical_columns = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n\n# Apply label encoding to each categorical column\nfor column in categorical_columns:\n    df_train[column] = label_encoder.fit_transform(df_train[column])\n    df_test[column] = label_encoder.fit_transform(df_test[column])","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:16:56.763077Z","iopub.execute_input":"2024-07-03T08:16:56.763534Z","iopub.status.idle":"2024-07-03T08:17:08.826375Z","shell.execute_reply.started":"2024-07-03T08:16:56.763494Z","shell.execute_reply":"2024-07-03T08:17:08.825051Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"print(\"Summary of Train dataset:\")\ndf_train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:08.827872Z","iopub.execute_input":"2024-07-03T08:17:08.828293Z","iopub.status.idle":"2024-07-03T08:17:14.300942Z","shell.execute_reply.started":"2024-07-03T08:17:08.828257Z","shell.execute_reply":"2024-07-03T08:17:14.299940Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Summary of Train dataset:\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"             Gender           Age  Driving_License   Region_Code  \\\ncount  1.150480e+07  1.150480e+07     1.150480e+07  1.150480e+07   \nmean   5.413510e-01  3.838356e+01     9.980220e-01  2.641869e+01   \nstd    4.982872e-01  1.499346e+01     4.443120e-02  1.299159e+01   \nmin    0.000000e+00  2.000000e+01     0.000000e+00  0.000000e+00   \n25%    0.000000e+00  2.400000e+01     1.000000e+00  1.500000e+01   \n50%    1.000000e+00  3.600000e+01     1.000000e+00  2.800000e+01   \n75%    1.000000e+00  4.900000e+01     1.000000e+00  3.500000e+01   \nmax    1.000000e+00  8.500000e+01     1.000000e+00  5.200000e+01   \n\n       Previously_Insured   Vehicle_Age  Vehicle_Damage  Annual_Premium  \\\ncount        1.150480e+07  1.150480e+07    1.150480e+07    1.150480e+07   \nmean         4.629966e-01  5.215298e-01    5.026798e-01    3.046137e+04   \nstd          4.986289e-01  5.767390e-01    4.999928e-01    1.645475e+04   \nmin          0.000000e+00  0.000000e+00    0.000000e+00    2.630000e+03   \n25%          0.000000e+00  0.000000e+00    0.000000e+00    2.527700e+04   \n50%          0.000000e+00  0.000000e+00    1.000000e+00    3.182400e+04   \n75%          1.000000e+00  1.000000e+00    1.000000e+00    3.945100e+04   \nmax          1.000000e+00  2.000000e+00    1.000000e+00    5.401650e+05   \n\n       Policy_Sales_Channel       Vintage        Target  \ncount          1.150480e+07  1.150480e+07  1.150480e+07  \nmean           1.124254e+02  1.638977e+02  1.229973e-01  \nstd            5.403571e+01  7.997953e+01  3.284341e-01  \nmin            1.000000e+00  1.000000e+01  0.000000e+00  \n25%            2.900000e+01  9.900000e+01  0.000000e+00  \n50%            1.510000e+02  1.660000e+02  0.000000e+00  \n75%            1.520000e+02  2.320000e+02  0.000000e+00  \nmax            1.630000e+02  2.990000e+02  1.000000e+00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.413510e-01</td>\n      <td>3.838356e+01</td>\n      <td>9.980220e-01</td>\n      <td>2.641869e+01</td>\n      <td>4.629966e-01</td>\n      <td>5.215298e-01</td>\n      <td>5.026798e-01</td>\n      <td>3.046137e+04</td>\n      <td>1.124254e+02</td>\n      <td>1.638977e+02</td>\n      <td>1.229973e-01</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.982872e-01</td>\n      <td>1.499346e+01</td>\n      <td>4.443120e-02</td>\n      <td>1.299159e+01</td>\n      <td>4.986289e-01</td>\n      <td>5.767390e-01</td>\n      <td>4.999928e-01</td>\n      <td>1.645475e+04</td>\n      <td>5.403571e+01</td>\n      <td>7.997953e+01</td>\n      <td>3.284341e-01</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000e+00</td>\n      <td>2.000000e+01</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>2.630000e+03</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000e+00</td>\n      <td>2.400000e+01</td>\n      <td>1.000000e+00</td>\n      <td>1.500000e+01</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>2.527700e+04</td>\n      <td>2.900000e+01</td>\n      <td>9.900000e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000e+00</td>\n      <td>3.600000e+01</td>\n      <td>1.000000e+00</td>\n      <td>2.800000e+01</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>3.182400e+04</td>\n      <td>1.510000e+02</td>\n      <td>1.660000e+02</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000e+00</td>\n      <td>4.900000e+01</td>\n      <td>1.000000e+00</td>\n      <td>3.500000e+01</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>3.945100e+04</td>\n      <td>1.520000e+02</td>\n      <td>2.320000e+02</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000e+00</td>\n      <td>8.500000e+01</td>\n      <td>1.000000e+00</td>\n      <td>5.200000e+01</td>\n      <td>1.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>5.401650e+05</td>\n      <td>1.630000e+02</td>\n      <td>2.990000e+02</td>\n      <td>1.000000e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:14.302314Z","iopub.execute_input":"2024-07-03T08:17:14.302758Z","iopub.status.idle":"2024-07-03T08:17:14.309672Z","shell.execute_reply.started":"2024-07-03T08:17:14.302722Z","shell.execute_reply":"2024-07-03T08:17:14.308600Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(11504798, 11)"},"metadata":{}}]},{"cell_type":"code","source":"df_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:14.313426Z","iopub.execute_input":"2024-07-03T08:17:14.313800Z","iopub.status.idle":"2024-07-03T08:17:14.329416Z","shell.execute_reply.started":"2024-07-03T08:17:14.313772Z","shell.execute_reply":"2024-07-03T08:17:14.328309Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(7669866, 10)"},"metadata":{}}]},{"cell_type":"markdown","source":"Making datasets smnaller to comapre accuracy of different models ","metadata":{}},{"cell_type":"code","source":"# Randomly sample 70,000 rows from df_train\ndf_train = df_train.sample(n=70000, random_state=1)\n\n# Randomly sample 30,000 rows from df_test\ndf_test = df_test.sample(n=30000, random_state=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:14.331150Z","iopub.execute_input":"2024-07-03T08:17:14.331583Z","iopub.status.idle":"2024-07-03T08:17:15.297021Z","shell.execute_reply.started":"2024-07-03T08:17:14.331519Z","shell.execute_reply":"2024-07-03T08:17:15.295868Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"##REMOVING WHITE SPACES FROM FEATURE NAMES\ndf_train.columns=[x.replace(' ','_') for x in df_train.columns]\ndf_test.columns=[x.replace(' ','_') for x in df_test.columns]","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.298425Z","iopub.execute_input":"2024-07-03T08:17:15.298875Z","iopub.status.idle":"2024-07-03T08:17:15.304876Z","shell.execute_reply.started":"2024-07-03T08:17:15.298844Z","shell.execute_reply":"2024-07-03T08:17:15.303789Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df_train.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.306142Z","iopub.execute_input":"2024-07-03T08:17:15.306481Z","iopub.status.idle":"2024-07-03T08:17:15.329907Z","shell.execute_reply.started":"2024-07-03T08:17:15.306432Z","shell.execute_reply":"2024-07-03T08:17:15.328746Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                        \n2904941        1   25                1          9.0                   0   \n7879547        0   21                1         28.0                   1   \n1554558        0   31                1         15.0                   0   \n5792501        1   25                1         10.0                   1   \n7511622        1   66                1         28.0                   1   \n2526767        1   57                1         28.0                   0   \n10105919       1   32                1         26.0                   0   \n2533428        0   26                1         32.0                   1   \n9826533        1   37                1          8.0                   0   \n7142540        1   49                1         28.0                   0   \n\n          Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                            \n2904941             1               1         33990.0                 152.0   \n7879547             1               0         49514.0                 152.0   \n1554558             1               0         36913.0                 152.0   \n5792501             1               0         36274.0                 152.0   \n7511622             0               1         44214.0                  26.0   \n2526767             0               1         30360.0                  23.0   \n10105919            1               1          2630.0                 152.0   \n2533428             1               0         32107.0                 152.0   \n9826533             0               1         35892.0                  26.0   \n7142540             0               0         50428.0                 124.0   \n\n          Vintage  Target  \nid                         \n2904941       166       0  \n7879547        84       0  \n1554558       149       0  \n5792501       256       0  \n7511622       223       0  \n2526767        22       0  \n10105919       37       0  \n2533428        27       0  \n9826533       137       1  \n7142540       227       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Target</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2904941</th>\n      <td>1</td>\n      <td>25</td>\n      <td>1</td>\n      <td>9.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>33990.0</td>\n      <td>152.0</td>\n      <td>166</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7879547</th>\n      <td>0</td>\n      <td>21</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>49514.0</td>\n      <td>152.0</td>\n      <td>84</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1554558</th>\n      <td>0</td>\n      <td>31</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>36913.0</td>\n      <td>152.0</td>\n      <td>149</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5792501</th>\n      <td>1</td>\n      <td>25</td>\n      <td>1</td>\n      <td>10.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>36274.0</td>\n      <td>152.0</td>\n      <td>256</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7511622</th>\n      <td>1</td>\n      <td>66</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>44214.0</td>\n      <td>26.0</td>\n      <td>223</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2526767</th>\n      <td>1</td>\n      <td>57</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>30360.0</td>\n      <td>23.0</td>\n      <td>22</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10105919</th>\n      <td>1</td>\n      <td>32</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2630.0</td>\n      <td>152.0</td>\n      <td>37</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2533428</th>\n      <td>0</td>\n      <td>26</td>\n      <td>1</td>\n      <td>32.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>32107.0</td>\n      <td>152.0</td>\n      <td>27</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9826533</th>\n      <td>1</td>\n      <td>37</td>\n      <td>1</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>35892.0</td>\n      <td>26.0</td>\n      <td>137</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7142540</th>\n      <td>1</td>\n      <td>49</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>50428.0</td>\n      <td>124.0</td>\n      <td>227</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"%%time\n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE BEFORE DOWNCASTING\nprint('\\ntrain dataset data usage information before downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information before downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)\n\n\n#DOWNCASTING TRAIN DATASET\nfor column in df_train.columns:\n    if df_train[column].dtype == \"float64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"float\")\n    if df_train[column].dtype == \"int64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"integer\")\n        \n#DOWNCASTING TEST DATASET\nfor column in df_test.columns:\n    if df_test[column].dtype == \"float64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"float\")\n    if df_test[column].dtype == \"int64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"integer\")\n        \n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE AFTER DOWNCASTING\nprint('train dataset data usage information after downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information after downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.331182Z","iopub.execute_input":"2024-07-03T08:17:15.331534Z","iopub.status.idle":"2024-07-03T08:17:15.387179Z","shell.execute_reply.started":"2024-07-03T08:17:15.331505Z","shell.execute_reply":"2024-07-03T08:17:15.386078Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"\ntrain dataset data usage information before downcasting\n\n<class 'pandas.core.frame.DataFrame'>\nIndex: 70000 entries, 2904941 to 7674533\nColumns: 11 entries, Gender to Target\ndtypes: float64(3), int64(8)\nmemory usage: 6.4 MB\n\ntest dataset data usage information before downcasting\n\n<class 'pandas.core.frame.DataFrame'>\nIndex: 30000 entries, 13221157 to 15861759\nColumns: 10 entries, Gender to Vintage\ndtypes: float64(3), int64(7)\nmemory usage: 2.5 MB\ntrain dataset data usage information after downcasting\n\n<class 'pandas.core.frame.DataFrame'>\nIndex: 70000 entries, 2904941 to 7674533\nColumns: 11 entries, Gender to Target\ndtypes: float32(3), int16(1), int8(7)\nmemory usage: 1.9 MB\n\ntest dataset data usage information after downcasting\n\n<class 'pandas.core.frame.DataFrame'>\nIndex: 30000 entries, 13221157 to 15861759\nColumns: 10 entries, Gender to Vintage\ndtypes: float32(3), int16(1), int8(6)\nmemory usage: 820.3 KB\nCPU times: user 30.4 ms, sys: 4.03 ms, total: 34.4 ms\nWall time: 41.5 ms\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Preprocessing\n","metadata":{}},{"cell_type":"code","source":"# Name of the column to be dropped\ncolumn_to_drop = 'Driving_License'\n\n# Drop the column from df_train\ndf_train.drop(columns=[column_to_drop], inplace=True)\n\n# Drop the column from df_test\ndf_test.drop(columns=[column_to_drop], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.388355Z","iopub.execute_input":"2024-07-03T08:17:15.388674Z","iopub.status.idle":"2024-07-03T08:17:15.398895Z","shell.execute_reply.started":"2024-07-03T08:17:15.388648Z","shell.execute_reply":"2024-07-03T08:17:15.397811Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"features = list(df_test.columns)\nX_train = df_train[features]\ny_train = df_train['Target']\nX_test = df_test[features]","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.400084Z","iopub.execute_input":"2024-07-03T08:17:15.400408Z","iopub.status.idle":"2024-07-03T08:17:15.411221Z","shell.execute_reply.started":"2024-07-03T08:17:15.400384Z","shell.execute_reply":"2024-07-03T08:17:15.410153Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"X_train.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.412603Z","iopub.execute_input":"2024-07-03T08:17:15.413007Z","iopub.status.idle":"2024-07-03T08:17:15.431637Z","shell.execute_reply.started":"2024-07-03T08:17:15.412978Z","shell.execute_reply":"2024-07-03T08:17:15.430615Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"          Gender  Age  Region_Code  Previously_Insured  Vehicle_Age  \\\nid                                                                    \n2904941        1   25          9.0                   0            1   \n7879547        0   21         28.0                   1            1   \n1554558        0   31         15.0                   0            1   \n5792501        1   25         10.0                   1            1   \n7511622        1   66         28.0                   1            0   \n2526767        1   57         28.0                   0            0   \n10105919       1   32         26.0                   0            1   \n2533428        0   26         32.0                   1            1   \n9826533        1   37          8.0                   0            0   \n7142540        1   49         28.0                   0            0   \n\n          Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \nid                                                                       \n2904941                1         33990.0                 152.0      166  \n7879547                0         49514.0                 152.0       84  \n1554558                0         36913.0                 152.0      149  \n5792501                0         36274.0                 152.0      256  \n7511622                1         44214.0                  26.0      223  \n2526767                1         30360.0                  23.0       22  \n10105919               1          2630.0                 152.0       37  \n2533428                0         32107.0                 152.0       27  \n9826533                1         35892.0                  26.0      137  \n7142540                0         50428.0                 124.0      227  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2904941</th>\n      <td>1</td>\n      <td>25</td>\n      <td>9.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>33990.0</td>\n      <td>152.0</td>\n      <td>166</td>\n    </tr>\n    <tr>\n      <th>7879547</th>\n      <td>0</td>\n      <td>21</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>49514.0</td>\n      <td>152.0</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>1554558</th>\n      <td>0</td>\n      <td>31</td>\n      <td>15.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>36913.0</td>\n      <td>152.0</td>\n      <td>149</td>\n    </tr>\n    <tr>\n      <th>5792501</th>\n      <td>1</td>\n      <td>25</td>\n      <td>10.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>36274.0</td>\n      <td>152.0</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>7511622</th>\n      <td>1</td>\n      <td>66</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>44214.0</td>\n      <td>26.0</td>\n      <td>223</td>\n    </tr>\n    <tr>\n      <th>2526767</th>\n      <td>1</td>\n      <td>57</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>30360.0</td>\n      <td>23.0</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>10105919</th>\n      <td>1</td>\n      <td>32</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2630.0</td>\n      <td>152.0</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>2533428</th>\n      <td>0</td>\n      <td>26</td>\n      <td>32.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>32107.0</td>\n      <td>152.0</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>9826533</th>\n      <td>1</td>\n      <td>37</td>\n      <td>8.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>35892.0</td>\n      <td>26.0</td>\n      <td>137</td>\n    </tr>\n    <tr>\n      <th>7142540</th>\n      <td>1</td>\n      <td>49</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>50428.0</td>\n      <td>124.0</td>\n      <td>227</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.432981Z","iopub.execute_input":"2024-07-03T08:17:15.433444Z","iopub.status.idle":"2024-07-03T08:17:15.450500Z","shell.execute_reply.started":"2024-07-03T08:17:15.433406Z","shell.execute_reply":"2024-07-03T08:17:15.449463Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"id\n2904941     0\n7879547     0\n1554558     0\n5792501     0\n7511622     0\n2526767     0\n10105919    0\n2533428     0\n9826533     1\n7142540     0\nName: Target, dtype: int8"},"metadata":{}}]},{"cell_type":"code","source":"X_test.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.451815Z","iopub.execute_input":"2024-07-03T08:17:15.452156Z","iopub.status.idle":"2024-07-03T08:17:15.474618Z","shell.execute_reply.started":"2024-07-03T08:17:15.452130Z","shell.execute_reply":"2024-07-03T08:17:15.473502Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"          Gender  Age  Region_Code  Previously_Insured  Vehicle_Age  \\\nid                                                                    \n13221157       1   23         50.0                   0            1   \n14370739       1   21          3.0                   1            1   \n15077775       0   24         15.0                   1            1   \n15711118       0   23          9.0                   0            1   \n13248928       1   37         41.0                   1            0   \n13688570       1   69         28.0                   1            0   \n17811613       0   50          8.0                   1            0   \n17202365       1   25         28.0                   1            1   \n14829029       0   45         47.0                   0            0   \n16960003       1   25         41.0                   1            1   \n\n          Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \nid                                                                       \n13221157               1          2630.0                 152.0      258  \n14370739               0         22267.0                 152.0       98  \n15077775               0         28405.0                 152.0      217  \n15711118               1         36212.0                 152.0      144  \n13248928               0         31826.0                 152.0       54  \n13688570               0         30347.0                 124.0      152  \n17811613               0         37405.0                  26.0      103  \n17202365               0         31352.0                 152.0       13  \n14829029               1         31031.0                 124.0      101  \n16960003               0         28863.0                 152.0      237  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>13221157</th>\n      <td>1</td>\n      <td>23</td>\n      <td>50.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2630.0</td>\n      <td>152.0</td>\n      <td>258</td>\n    </tr>\n    <tr>\n      <th>14370739</th>\n      <td>1</td>\n      <td>21</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>22267.0</td>\n      <td>152.0</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>15077775</th>\n      <td>0</td>\n      <td>24</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>28405.0</td>\n      <td>152.0</td>\n      <td>217</td>\n    </tr>\n    <tr>\n      <th>15711118</th>\n      <td>0</td>\n      <td>23</td>\n      <td>9.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>36212.0</td>\n      <td>152.0</td>\n      <td>144</td>\n    </tr>\n    <tr>\n      <th>13248928</th>\n      <td>1</td>\n      <td>37</td>\n      <td>41.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>31826.0</td>\n      <td>152.0</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>13688570</th>\n      <td>1</td>\n      <td>69</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30347.0</td>\n      <td>124.0</td>\n      <td>152</td>\n    </tr>\n    <tr>\n      <th>17811613</th>\n      <td>0</td>\n      <td>50</td>\n      <td>8.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>37405.0</td>\n      <td>26.0</td>\n      <td>103</td>\n    </tr>\n    <tr>\n      <th>17202365</th>\n      <td>1</td>\n      <td>25</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>31352.0</td>\n      <td>152.0</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>14829029</th>\n      <td>0</td>\n      <td>45</td>\n      <td>47.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>31031.0</td>\n      <td>124.0</td>\n      <td>101</td>\n    </tr>\n    <tr>\n      <th>16960003</th>\n      <td>1</td>\n      <td>25</td>\n      <td>41.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>28863.0</td>\n      <td>152.0</td>\n      <td>237</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def cross_validate_model(model, X_train, y_train, params, n_splits=10):\n    \"\"\"\n    Performs K-Fold cross-validation for a given model, returns the last model and average validation accuracy.\n\n    Parameters:\n        model: Machine learning model class (e.g., RandomForestClassifier)\n        X_train: Training feature dataset\n        y_train: Training target dataset\n        params: Dictionary of parameters to initialize the model\n        n_splits: Number of folds for cross-validation (default: 10)\n\n    Returns:\n        last_model: The last trained model instance\n        average_val_accuracy: Average validation accuracy over all folds\n    \"\"\"\n    print(\"Starting\")\n    # Initialize variables\n    cv = KFold(n_splits=n_splits, shuffle=True, random_state=0)\n    val_scores = []\n    print(\"K-fold done\")\n\n    # Cross-validation loop\n    for fold, (train_ind, valid_ind) in enumerate(cv.split(X_train)):\n        print(\"new fold\")\n        # Data splitting\n        X_fold_train = X_train.iloc[train_ind]\n        y_fold_train = y_train.iloc[train_ind]\n        X_val = X_train.iloc[valid_ind]\n        y_val = y_train.iloc[valid_ind]\n        print(\"train val split done\")\n        # Model initialization and training\n        clf = model(**params)\n        clf.fit(X_fold_train, y_fold_train)\n        print(\"fiitng done\")\n        # Predict and evaluate\n        y_pred_trn = clf.predict(X_fold_train)\n        y_pred_val = clf.predict(X_val)\n        train_acc = accuracy_score(y_fold_train, y_pred_trn)\n        val_acc = accuracy_score(y_val, y_pred_val)\n        print(f\"Fold: {fold}, Train Accuracy: {train_acc:.5f}, Val Accuracy: {val_acc:.5f}\")\n        print(\"-\" * 50)\n        \n        # Accumulate validation scores\n        val_scores.append(val_acc)\n\n    # Calculate the average validation score\n    average_val_accuracy = np.mean(val_scores)\n    print(\"Average Validation Accuracy:\", average_val_accuracy)\n\n    return clf, average_val_accuracy","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.476185Z","iopub.execute_input":"2024-07-03T08:17:15.476724Z","iopub.status.idle":"2024-07-03T08:17:15.488280Z","shell.execute_reply.started":"2024-07-03T08:17:15.476687Z","shell.execute_reply":"2024-07-03T08:17:15.487138Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"Trying Different ML options ","metadata":{}},{"cell_type":"markdown","source":"# Random Forest ","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nprint('Random Forest Cross-Validation Results:\\n')\nrf_model, rf_mean_accuracy = cross_validate_model(RandomForestClassifier, X_train, y_train, params={})","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:17:15.489787Z","iopub.execute_input":"2024-07-03T08:17:15.490198Z","iopub.status.idle":"2024-07-03T08:19:02.053099Z","shell.execute_reply.started":"2024-07-03T08:17:15.490161Z","shell.execute_reply":"2024-07-03T08:19:02.051983Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Random Forest Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.99998, Val Accuracy: 0.86743\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 1.00000, Val Accuracy: 0.86271\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 1.00000, Val Accuracy: 0.87414\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 1.00000, Val Accuracy: 0.86900\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.99997, Val Accuracy: 0.86843\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.99998, Val Accuracy: 0.87286\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.99998, Val Accuracy: 0.86371\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.99998, Val Accuracy: 0.87500\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 1.00000, Val Accuracy: 0.87243\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 1.00000, Val Accuracy: 0.87171\n--------------------------------------------------\nAverage Validation Accuracy: 0.869742857142857\n","output_type":"stream"}]},{"cell_type":"code","source":"rf_preds = rf_model.predict(X_test)\nrf_preds_labels = label_encoder.inverse_transform(rf_preds)\n\n# Save the predictions to a CSV file\nrf_result = pd.DataFrame(X_test.index)\nrf_result['Target'] = rf_preds_labels\nrf_result.to_csv('result_rf.csv', index=False)\nrf_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:19:02.054534Z","iopub.execute_input":"2024-07-03T08:19:02.055035Z","iopub.status.idle":"2024-07-03T08:19:02.682270Z","shell.execute_reply.started":"2024-07-03T08:19:02.054998Z","shell.execute_reply":"2024-07-03T08:19:02.681203Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Adaptive Boosting (Adaboost)","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import AdaBoostClassifier\n\nprint('AdaBoost Cross-Validation Results:\\n')\nada_model, ada_mean_accuracy = cross_validate_model(AdaBoostClassifier, X_train, y_train, params={})","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:19:02.683712Z","iopub.execute_input":"2024-07-03T08:19:02.684138Z","iopub.status.idle":"2024-07-03T08:19:29.015104Z","shell.execute_reply.started":"2024-07-03T08:19:02.684102Z","shell.execute_reply":"2024-07-03T08:19:29.013818Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"AdaBoost Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.87875, Val Accuracy: 0.87657\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 0.87897, Val Accuracy: 0.87414\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 0.87802, Val Accuracy: 0.88286\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 0.87840, Val Accuracy: 0.87914\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.87849, Val Accuracy: 0.87829\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.87832, Val Accuracy: 0.88000\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.87978, Val Accuracy: 0.86729\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.87810, Val Accuracy: 0.88271\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 0.87810, Val Accuracy: 0.88043\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 0.87794, Val Accuracy: 0.88257\n--------------------------------------------------\nAverage Validation Accuracy: 0.8784000000000001\n","output_type":"stream"}]},{"cell_type":"code","source":"ada_preds = ada_model.predict(X_test)\nada_preds_labels = label_encoder.inverse_transform(ada_preds)\n\n# Save the predictions to a CSV file\nada_result = pd.DataFrame(X_test.index)\nada_result['Target'] = ada_preds_labels\nada_result.to_csv('result_ada.csv', index=False)\nada_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:19:29.016416Z","iopub.execute_input":"2024-07-03T08:19:29.016760Z","iopub.status.idle":"2024-07-03T08:19:29.217938Z","shell.execute_reply.started":"2024-07-03T08:19:29.016731Z","shell.execute_reply":"2024-07-03T08:19:29.216720Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Gradient Boosting","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier\n\nprint('Gradient Boosting Cross-Validation Results:\\n')\ngb_model, gb_mean_accuracy = cross_validate_model(GradientBoostingClassifier, X_train, y_train, params={})","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:19:29.219353Z","iopub.execute_input":"2024-07-03T08:19:29.219750Z","iopub.status.idle":"2024-07-03T08:20:42.766810Z","shell.execute_reply.started":"2024-07-03T08:19:29.219719Z","shell.execute_reply":"2024-07-03T08:20:42.765778Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Gradient Boosting Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.87930, Val Accuracy: 0.87686\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 0.87990, Val Accuracy: 0.87386\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 0.87860, Val Accuracy: 0.88314\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 0.87902, Val Accuracy: 0.87986\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.87905, Val Accuracy: 0.87871\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.87916, Val Accuracy: 0.87929\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.88027, Val Accuracy: 0.86757\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.87878, Val Accuracy: 0.88271\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 0.87905, Val Accuracy: 0.88086\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 0.87870, Val Accuracy: 0.88229\n--------------------------------------------------\nAverage Validation Accuracy: 0.8785142857142857\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict the test set and reverse the label encoding\ngb_preds = gb_model.predict(X_test)\ngb_preds_labels = label_encoder.inverse_transform(gb_preds)\n\n# Save the predictions to a CSV file\ngb_result = pd.DataFrame(X_test.index)\ngb_result['Target'] = gb_preds_labels\ngb_result.to_csv('result_gb.csv', index=False)\ngb_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:20:42.768114Z","iopub.execute_input":"2024-07-03T08:20:42.768419Z","iopub.status.idle":"2024-07-03T08:20:42.863700Z","shell.execute_reply.started":"2024-07-03T08:20:42.768396Z","shell.execute_reply":"2024-07-03T08:20:42.862428Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# eXtreme Gradient Boosting (XGBoost)","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\nprint('XGBoost Cross-Validation Results:\\n')\nxgb_model, xgb_mean_accuracy = cross_validate_model(XGBClassifier, X_train, y_train, params={})","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:20:42.865195Z","iopub.execute_input":"2024-07-03T08:20:42.865637Z","iopub.status.idle":"2024-07-03T08:20:47.900606Z","shell.execute_reply.started":"2024-07-03T08:20:42.865596Z","shell.execute_reply":"2024-07-03T08:20:47.899646Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"XGBoost Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.89987, Val Accuracy: 0.87471\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 0.89975, Val Accuracy: 0.87071\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 0.89776, Val Accuracy: 0.88243\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 0.89981, Val Accuracy: 0.87886\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.89833, Val Accuracy: 0.87786\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.89773, Val Accuracy: 0.87729\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.89873, Val Accuracy: 0.86871\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.89927, Val Accuracy: 0.87600\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 0.89802, Val Accuracy: 0.88171\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 0.89981, Val Accuracy: 0.88071\n--------------------------------------------------\nAverage Validation Accuracy: 0.8769\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict the test set and reverse the label encoding\nxgb_preds = xgb_model.predict(X_test)\nxgb_preds_labels = label_encoder.inverse_transform(xgb_preds)\n\n# Save the predictions to a CSV file\nxgb_result = pd.DataFrame(X_test.index)\nxgb_result['Target'] = xgb_preds_labels\nxgb_result.to_csv('result_xgb.csv', index=False)\nxgb_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:20:47.905533Z","iopub.execute_input":"2024-07-03T08:20:47.905921Z","iopub.status.idle":"2024-07-03T08:20:47.980593Z","shell.execute_reply.started":"2024-07-03T08:20:47.905890Z","shell.execute_reply":"2024-07-03T08:20:47.979558Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Categorical Boosting (CatBoost)","metadata":{}},{"cell_type":"code","source":"from catboost import CatBoostClassifier\n\ncat_params = {\n    'verbose': 0,                       # Silent mode\n}\n\nprint('CatBoost Cross-Validation Results:\\n')\ncat_model, cat_mean_accuracy = cross_validate_model(CatBoostClassifier, X_train, y_train, cat_params)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:20:47.982020Z","iopub.execute_input":"2024-07-03T08:20:47.982346Z","iopub.status.idle":"2024-07-03T08:22:39.562069Z","shell.execute_reply.started":"2024-07-03T08:20:47.982321Z","shell.execute_reply":"2024-07-03T08:22:39.561027Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"CatBoost Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.89414, Val Accuracy: 0.87429\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 0.89478, Val Accuracy: 0.87314\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 0.89292, Val Accuracy: 0.88257\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 0.89360, Val Accuracy: 0.88129\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.89394, Val Accuracy: 0.87986\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.89338, Val Accuracy: 0.87971\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.89448, Val Accuracy: 0.87257\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.89314, Val Accuracy: 0.88229\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 0.89341, Val Accuracy: 0.88314\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 0.89337, Val Accuracy: 0.88243\n--------------------------------------------------\nAverage Validation Accuracy: 0.8791285714285715\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict the test set and reverse the label encoding\ncat_preds = cat_model.predict(X_test)\ncat_preds_labels = label_encoder.inverse_transform(cat_preds)\n\n# Save the predictions to a CSV file\ncat_result = pd.DataFrame(X_test.index)\ncat_result['Target'] = cat_preds_labels\ncat_result.to_csv('result_cat.csv', index=False)\ncat_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:39.563537Z","iopub.execute_input":"2024-07-03T08:22:39.563925Z","iopub.status.idle":"2024-07-03T08:22:39.632824Z","shell.execute_reply.started":"2024-07-03T08:22:39.563896Z","shell.execute_reply":"2024-07-03T08:22:39.631821Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3.6 Light Gradient Boosting Machine (LightGBM)","metadata":{}},{"cell_type":"code","source":"from lightgbm import LGBMClassifier\n\nlgb_params = {\n    'verbose': -1,                    # Set to -1 for silent mode, no process information printed\n}\n\nprint('LightGBM Cross-Validation Results:\\n')\nlgb_model, lgb_mean_accuracy = cross_validate_model(LGBMClassifier, X_train, y_train, lgb_params)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:39.634130Z","iopub.execute_input":"2024-07-03T08:22:39.634468Z","iopub.status.idle":"2024-07-03T08:22:53.519424Z","shell.execute_reply.started":"2024-07-03T08:22:39.634430Z","shell.execute_reply":"2024-07-03T08:22:53.518299Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"LightGBM Cross-Validation Results:\n\nStarting\nK-fold done\nnew fold\ntrain val split done\nfiitng done\nFold: 0, Train Accuracy: 0.88541, Val Accuracy: 0.87600\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 1, Train Accuracy: 0.88487, Val Accuracy: 0.87543\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 2, Train Accuracy: 0.88351, Val Accuracy: 0.88343\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 3, Train Accuracy: 0.88452, Val Accuracy: 0.88143\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 4, Train Accuracy: 0.88510, Val Accuracy: 0.88057\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 5, Train Accuracy: 0.88457, Val Accuracy: 0.88200\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 6, Train Accuracy: 0.88586, Val Accuracy: 0.87014\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 7, Train Accuracy: 0.88552, Val Accuracy: 0.88243\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 8, Train Accuracy: 0.88514, Val Accuracy: 0.88100\n--------------------------------------------------\nnew fold\ntrain val split done\nfiitng done\nFold: 9, Train Accuracy: 0.88502, Val Accuracy: 0.88300\n--------------------------------------------------\nAverage Validation Accuracy: 0.8795428571428572\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict the test set and reverse the label encoding\nlgb_preds = lgb_model.predict(X_test)\nlgb_preds_labels = label_encoder.inverse_transform(lgb_preds)\n\n# Save the predictions to a CSV file\nlgb_result = pd.DataFrame(X_test.index)\nlgb_result['Target'] = lgb_preds_labels\nlgb_result.to_csv('result_lgb.csv', index=False)\nlgb_result.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:53.520579Z","iopub.execute_input":"2024-07-03T08:22:53.520898Z","iopub.status.idle":"2024-07-03T08:22:53.713466Z","shell.execute_reply.started":"2024-07-03T08:22:53.520871Z","shell.execute_reply":"2024-07-03T08:22:53.712457Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"         id Target\n0  13221157     No\n1  14370739     No\n2  15077775     No\n3  15711118     No\n4  13248928     No\n5  13688570     No\n6  17811613     No\n7  17202365     No\n8  14829029     No\n9  16960003     No","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>13221157</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14370739</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15077775</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15711118</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13248928</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>13688570</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>17811613</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>17202365</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14829029</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>16960003</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Model Comparison","metadata":{}},{"cell_type":"code","source":"accuracy = pd.DataFrame({\n    'Model': ['Random Forest', 'AdaBoost', 'Gradient Boosting', 'XGBoost', 'CatBoost', 'LightGBM'],\n    'Score': [rf_mean_accuracy, ada_mean_accuracy, gb_mean_accuracy,\n              xgb_mean_accuracy, cat_mean_accuracy, lgb_mean_accuracy]\n})\n\naccuracy_sorted = accuracy.sort_values(by='Score', ascending=False)\naccuracy_sorted","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:53.714808Z","iopub.execute_input":"2024-07-03T08:22:53.715161Z","iopub.status.idle":"2024-07-03T08:22:53.730114Z","shell.execute_reply.started":"2024-07-03T08:22:53.715133Z","shell.execute_reply":"2024-07-03T08:22:53.729069Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"               Model     Score\n5           LightGBM  0.879543\n4           CatBoost  0.879129\n2  Gradient Boosting  0.878514\n1           AdaBoost  0.878400\n3            XGBoost  0.876900\n0      Random Forest  0.869743","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>LightGBM</td>\n      <td>0.879543</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CatBoost</td>\n      <td>0.879129</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gradient Boosting</td>\n      <td>0.878514</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AdaBoost</td>\n      <td>0.878400</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>XGBoost</td>\n      <td>0.876900</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Random Forest</td>\n      <td>0.869743</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def plot_feature_importances(model, model_name, color_scale='Reds', dataframe=None):\n    \"\"\"\n    Plots feature importances of a fitted random forest model.\n\n    Parameters:\n    model (RandomForest model): The trained random forest model.\n    color_scale (str): Color scale for the plot.\n    dataframe (pd.DataFrame): DataFrame used to train the model. Must not be None.\n\n    Returns:\n    Plotly Figure: A plot showing feature importances.\n    \"\"\"\n    if dataframe is None:\n        raise ValueError(\"Dataframe cannot be None and must contain the feature names.\")\n\n    # Extracting feature importances and sorting them\n    importances = model.feature_importances_\n    indices = np.argsort(importances)[::-1]\n    feature_names = dataframe.columns\n\n    # Creating a DataFrame for the importances\n    feature_importances = pd.DataFrame({\n        'Feature': feature_names[indices],\n        'Importance': importances[indices]\n    })\n\n    # Plotting the feature importances\n    fig = px.bar(feature_importances.sort_values('Importance', ascending=True), \n                 x='Importance', \n                 y='Feature',\n                 title=f\"Feature Importances in {model_name}\",\n                 labels={'Importance': 'Importance', 'Feature': 'Feature'},\n                 height=1400,\n                 color='Importance',\n                 color_continuous_scale=color_scale)\n\n    fig.update_layout(xaxis_title='Importance', yaxis_title='Feature')\n\n    return fig","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:53.731372Z","iopub.execute_input":"2024-07-03T08:22:53.731746Z","iopub.status.idle":"2024-07-03T08:22:53.741091Z","shell.execute_reply.started":"2024-07-03T08:22:53.731717Z","shell.execute_reply":"2024-07-03T08:22:53.739749Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"model_name = 'Random Forest'\nfig = plot_feature_importances(rf_model, model_name, 'Picnic', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:53.742241Z","iopub.execute_input":"2024-07-03T08:22:53.742684Z","iopub.status.idle":"2024-07-03T08:22:55.631960Z","shell.execute_reply.started":"2024-07-03T08:22:53.742645Z","shell.execute_reply":"2024-07-03T08:22:55.630956Z"},"trusted":true},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/html":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        "},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"2d7fa2f5-063a-4d2c-9995-3b02af75a7a8\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2d7fa2f5-063a-4d2c-9995-3b02af75a7a8\")) {                    Plotly.newPlot(                        \"2d7fa2f5-063a-4d2c-9995-3b02af75a7a8\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.015575155435093902,0.021166341278839842,0.0586715309697797,0.0712361126785394,0.07141139881600823,0.11912601255187397,0.16610531638555792,0.22879541552708926,0.24791271635721773],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[0.015575155435093902,0.021166341278839842,0.0586715309697797,0.0712361126785394,0.07141139881600823,0.11912601255187397,0.16610531638555792,0.22879541552708926,0.24791271635721773],\"xaxis\":\"x\",\"y\":[\"Vehicle_Age\",\"Gender\",\"Previously_Insured\",\"Vehicle_Damage\",\"Policy_Sales_Channel\",\"Region_Code\",\"Age\",\"Annual_Premium\",\"Vintage\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"rgb(0,0,255)\"],[0.1,\"rgb(51,153,255)\"],[0.2,\"rgb(102,204,255)\"],[0.3,\"rgb(153,204,255)\"],[0.4,\"rgb(204,204,255)\"],[0.5,\"rgb(255,255,255)\"],[0.6,\"rgb(255,204,255)\"],[0.7,\"rgb(255,153,255)\"],[0.8,\"rgb(255,102,204)\"],[0.9,\"rgb(255,102,102)\"],[1.0,\"rgb(255,0,0)\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in Random Forest\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('2d7fa2f5-063a-4d2c-9995-3b02af75a7a8');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"model_name = 'AdaBoost'\nfig = plot_feature_importances(ada_model, model_name, 'Rainbow', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:55.633204Z","iopub.execute_input":"2024-07-03T08:22:55.633513Z","iopub.status.idle":"2024-07-03T08:22:55.704373Z","shell.execute_reply.started":"2024-07-03T08:22:55.633486Z","shell.execute_reply":"2024-07-03T08:22:55.703304Z"},"trusted":true},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"8ee594e6-87ea-4c9b-9640-a1b22af32064\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8ee594e6-87ea-4c9b-9640-a1b22af32064\")) {                    Plotly.newPlot(                        \"8ee594e6-87ea-4c9b-9640-a1b22af32064\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.02,0.02,0.02,0.06,0.08,0.08,0.12,0.26,0.34],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[0.02,0.02,0.02,0.06,0.08,0.08,0.12,0.26,0.34],\"xaxis\":\"x\",\"y\":[\"Annual_Premium\",\"Vehicle_Age\",\"Gender\",\"Previously_Insured\",\"Vehicle_Damage\",\"Region_Code\",\"Vintage\",\"Age\",\"Policy_Sales_Channel\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"rgb(150,0,90)\"],[0.125,\"rgb(0,0,200)\"],[0.25,\"rgb(0,25,255)\"],[0.375,\"rgb(0,152,255)\"],[0.5,\"rgb(44,255,150)\"],[0.625,\"rgb(151,255,0)\"],[0.75,\"rgb(255,234,0)\"],[0.875,\"rgb(255,111,0)\"],[1.0,\"rgb(255,0,0)\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in AdaBoost\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('8ee594e6-87ea-4c9b-9640-a1b22af32064');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"model_name = 'Gradient Boosting'\nfig = plot_feature_importances(gb_model, model_name, 'HSV', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:55.705700Z","iopub.execute_input":"2024-07-03T08:22:55.706036Z","iopub.status.idle":"2024-07-03T08:22:55.775944Z","shell.execute_reply.started":"2024-07-03T08:22:55.706009Z","shell.execute_reply":"2024-07-03T08:22:55.774834Z"},"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"7d0a9f31-2466-4754-af1f-953934c230f9\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7d0a9f31-2466-4754-af1f-953934c230f9\")) {                    Plotly.newPlot(                        \"7d0a9f31-2466-4754-af1f-953934c230f9\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.00018564903288236068,0.008724834415868566,0.014768399434129876,0.015846554639301232,0.030098874829624634,0.04578567221523972,0.12087721850339192,0.16764672843252756,0.596066068497034],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[0.00018564903288236068,0.008724834415868566,0.014768399434129876,0.015846554639301232,0.030098874829624634,0.04578567221523972,0.12087721850339192,0.16764672843252756,0.596066068497034],\"xaxis\":\"x\",\"y\":[\"Gender\",\"Region_Code\",\"Vehicle_Age\",\"Annual_Premium\",\"Vintage\",\"Policy_Sales_Channel\",\"Previously_Insured\",\"Age\",\"Vehicle_Damage\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"#ff0000\"],[0.1111111111111111,\"#ffa700\"],[0.2222222222222222,\"#afff00\"],[0.3333333333333333,\"#08ff00\"],[0.4444444444444444,\"#00ff9f\"],[0.5555555555555556,\"#00b7ff\"],[0.6666666666666666,\"#0010ff\"],[0.7777777777777778,\"#9700ff\"],[0.8888888888888888,\"#ff00bf\"],[1.0,\"#ff0000\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in Gradient Boosting\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7d0a9f31-2466-4754-af1f-953934c230f9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"model_name = 'XGBoost'\nfig = plot_feature_importances(xgb_model, model_name, 'Bluered', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:55.777676Z","iopub.execute_input":"2024-07-03T08:22:55.778006Z","iopub.status.idle":"2024-07-03T08:22:55.842115Z","shell.execute_reply.started":"2024-07-03T08:22:55.777981Z","shell.execute_reply":"2024-07-03T08:22:55.841026Z"},"trusted":true},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"70e3b325-72b2-482c-8d04-1f978e918afb\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"70e3b325-72b2-482c-8d04-1f978e918afb\")) {                    Plotly.newPlot(                        \"70e3b325-72b2-482c-8d04-1f978e918afb\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.0050616562,0.005686515,0.0057020104,0.0066273874,0.008145643,0.00841114,0.012095509,0.35240272,0.5958674],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[0.0050616562,0.005686515,0.0057020104,0.0066273874,0.008145643,0.00841114,0.012095509,0.35240272,0.5958674],\"xaxis\":\"x\",\"y\":[\"Gender\",\"Annual_Premium\",\"Region_Code\",\"Vintage\",\"Policy_Sales_Channel\",\"Vehicle_Age\",\"Age\",\"Previously_Insured\",\"Vehicle_Damage\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"rgb(0,0,255)\"],[1.0,\"rgb(255,0,0)\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in XGBoost\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('70e3b325-72b2-482c-8d04-1f978e918afb');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"model_name = 'CatBoost'\nfig = plot_feature_importances(cat_model, model_name, 'Temps', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:55.843791Z","iopub.execute_input":"2024-07-03T08:22:55.844209Z","iopub.status.idle":"2024-07-03T08:22:55.910343Z","shell.execute_reply.started":"2024-07-03T08:22:55.844174Z","shell.execute_reply":"2024-07-03T08:22:55.909321Z"},"trusted":true},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"03dcce03-e463-4ccf-8509-067a0a455457\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"03dcce03-e463-4ccf-8509-067a0a455457\")) {                    Plotly.newPlot(                        \"03dcce03-e463-4ccf-8509-067a0a455457\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[1.9769897657445363,2.579155054928694,6.511191385331256,8.837989836357076,8.937794063613955,10.291443113096916,11.380975547249907,24.38682400664333,25.09763722703431],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[1.9769897657445363,2.579155054928694,6.511191385331256,8.837989836357076,8.937794063613955,10.291443113096916,11.380975547249907,24.38682400664333,25.09763722703431],\"xaxis\":\"x\",\"y\":[\"Vehicle_Age\",\"Gender\",\"Policy_Sales_Channel\",\"Annual_Premium\",\"Region_Code\",\"Age\",\"Vintage\",\"Vehicle_Damage\",\"Previously_Insured\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"rgb(0, 147, 146)\"],[0.16666666666666666,\"rgb(57, 177, 133)\"],[0.3333333333333333,\"rgb(156, 203, 134)\"],[0.5,\"rgb(233, 226, 156)\"],[0.6666666666666666,\"rgb(238, 180, 121)\"],[0.8333333333333334,\"rgb(232, 132, 113)\"],[1.0,\"rgb(207, 89, 126)\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in CatBoost\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('03dcce03-e463-4ccf-8509-067a0a455457');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"model_name = 'LightGBM'\nfig = plot_feature_importances(lgb_model, model_name, 'Reds', X_train)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:22:55.911803Z","iopub.execute_input":"2024-07-03T08:22:55.912128Z","iopub.status.idle":"2024-07-03T08:22:55.977092Z","shell.execute_reply.started":"2024-07-03T08:22:55.912101Z","shell.execute_reply":"2024-07-03T08:22:55.975947Z"},"trusted":true},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"4825c260-6e52-49df-84e0-c328b8345d4b\" class=\"plotly-graph-div\" style=\"height:1400px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4825c260-6e52-49df-84e0-c328b8345d4b\")) {                    Plotly.newPlot(                        \"4825c260-6e52-49df-84e0-c328b8345d4b\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{marker.color}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[63,72,79,92,365,410,476,555,888],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[63,72,79,92,365,410,476,555,888],\"xaxis\":\"x\",\"y\":[\"Gender\",\"Vehicle_Damage\",\"Vehicle_Age\",\"Previously_Insured\",\"Policy_Sales_Channel\",\"Region_Code\",\"Annual_Premium\",\"Age\",\"Vintage\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Importance\"}},\"colorscale\":[[0.0,\"rgb(255,245,240)\"],[0.125,\"rgb(254,224,210)\"],[0.25,\"rgb(252,187,161)\"],[0.375,\"rgb(252,146,114)\"],[0.5,\"rgb(251,106,74)\"],[0.625,\"rgb(239,59,44)\"],[0.75,\"rgb(203,24,29)\"],[0.875,\"rgb(165,15,21)\"],[1.0,\"rgb(103,0,13)\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Feature Importances in LightGBM\"},\"barmode\":\"relative\",\"height\":1400},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('4825c260-6e52-49df-84e0-c328b8345d4b');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}