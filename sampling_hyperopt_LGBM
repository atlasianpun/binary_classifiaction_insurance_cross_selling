{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# iteratuons to run - \n# higher number of 0s \n#normal hyperopt \n# just submit ","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:07.256854Z","iopub.execute_input":"2024-07-11T02:32:07.257252Z","iopub.status.idle":"2024-07-11T02:32:07.281757Z","shell.execute_reply.started":"2024-07-11T02:32:07.257221Z","shell.execute_reply":"2024-07-11T02:32:07.280569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"##Required packages \n\n#Generic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nimport gc\nimport os\nimport warnings\nimport ydata_profiling as dp\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import shuffle\n\n\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import early_stopping, log_evaluation  \nfrom hyperopt import hp, tpe, fmin, Trials, STATUS_OK, STATUS_FAIL\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:07.284179Z","iopub.execute_input":"2024-07-11T02:32:07.284592Z","iopub.status.idle":"2024-07-11T02:32:16.424230Z","shell.execute_reply.started":"2024-07-11T02:32:07.284560Z","shell.execute_reply":"2024-07-11T02:32:16.423296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def results_pie(df_train):\n    \n    if 'id' not in df_train.columns:\n        df_train = df_train.reset_index()\n        if 'id' not in df_train.columns:\n            df_train['id'] = df_train.index\n    \n    df=df_train[['id','Target']].groupby('Target').count().reset_index().sort_values(by='Target')\n    df.columns=['Target','Observation Count']\n\n    # df['Target_Desc']=df['Target']\n    #CREATING VISUALIZATION\n    fig=px.pie(df,names='Target',values='Observation Count',color='Target',hole=0.7,\n               color_discrete_sequence=px.colors.qualitative.Plotly,width=600,height=600)\n\n\n    fig.update_layout(\n                        {'paper_bgcolor':'#FEFBF3'},\n                        title={\n                            'text': \"Target\",\n                            'x':0.5,\n                            'font_color':\"red\"},\n\n                        font_color=\"blue\",\n                        legend_title=\"Target\",\n                        legend_title_font_color=\"green\",\n                        legend=dict(\n                                    yanchor=\"top\",\n                                    y=0.99,\n                                    xanchor=\"right\",\n                                    x=0.05\n                                    )\n\n                    )\n\n\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:16.425697Z","iopub.execute_input":"2024-07-11T02:32:16.426034Z","iopub.status.idle":"2024-07-11T02:32:16.436162Z","shell.execute_reply.started":"2024-07-11T02:32:16.426005Z","shell.execute_reply":"2024-07-11T02:32:16.435096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_subsample(df,target_col, ratio_0 = 0.1, ratio_1 = 0.3):\n    df_0 = df[df[target_col] == 0]\n    df_1 = df[df[target_col] == 1]\n    \n    # Take the specified ratio of each DataFrame\n    df_0_sampled = df_0.sample(frac=ratio_0)\n    df_1_sampled = df_1.sample(frac=ratio_1)\n    \n    # Merge the sampled DataFrames\n    df_merged = pd.concat([df_0_sampled, df_1_sampled], ignore_index=True)\n    \n    # Shuffle the merged DataFrame\n    df_shuffled = shuffle(df_merged).reset_index(drop=True)\n    \n    results_pie(df_shuffled)\n    \n    X = df_shuffled.drop(columns=[target_col])\n    y = df_shuffled[target_col]\n\n    \n    # Split into training and validation sets\n    X_sub_train, X_sub_val, y_sub_train, y_sub_val = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    return X_sub_train, X_sub_val, y_sub_train, y_sub_val ","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:16.439064Z","iopub.execute_input":"2024-07-11T02:32:16.439896Z","iopub.status.idle":"2024-07-11T02:32:16.453744Z","shell.execute_reply.started":"2024-07-11T02:32:16.439858Z","shell.execute_reply":"2024-07-11T02:32:16.452662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv')\ndf_test  = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:16.455037Z","iopub.execute_input":"2024-07-11T02:32:16.456221Z","iopub.status.idle":"2024-07-11T02:32:55.436748Z","shell.execute_reply.started":"2024-07-11T02:32:16.456163Z","shell.execute_reply":"2024-07-11T02:32:55.435738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Name of the column to be set as the index\nid_column = 'id'\n\n# Remove the column and set it as the index for df_train\ndf_train.set_index(id_column, inplace=True)\n\n# Remove the column and set it as the index for df_test\ndf_test.set_index(id_column, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:55.437975Z","iopub.execute_input":"2024-07-11T02:32:55.438317Z","iopub.status.idle":"2024-07-11T02:32:55.456755Z","shell.execute_reply.started":"2024-07-11T02:32:55.438287Z","shell.execute_reply":"2024-07-11T02:32:55.455515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Rename the column 'Response' to 'Target' in the DataFrame df_test\ndf_train.rename(columns={'Response': 'Target'}, inplace=True)\ndf_train['Target'] = df_train['Target'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:55.458499Z","iopub.execute_input":"2024-07-11T02:32:55.458861Z","iopub.status.idle":"2024-07-11T02:32:55.540920Z","shell.execute_reply.started":"2024-07-11T02:32:55.458832Z","shell.execute_reply":"2024-07-11T02:32:55.539875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# List of columns that are categorical\ncategorical_columns = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n\n# Apply label encoding to each categorical column\nfor column in categorical_columns:\n    df_train[column] = label_encoder.fit_transform(df_train[column])\n    df_test[column] = label_encoder.fit_transform(df_test[column])","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:32:55.542203Z","iopub.execute_input":"2024-07-11T02:32:55.542595Z","iopub.status.idle":"2024-07-11T02:33:12.527996Z","shell.execute_reply.started":"2024-07-11T02:32:55.542565Z","shell.execute_reply":"2024-07-11T02:33:12.526932Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Summary of Train dataset:\")\ndf_train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:12.529280Z","iopub.execute_input":"2024-07-11T02:33:12.529710Z","iopub.status.idle":"2024-07-11T02:33:17.937917Z","shell.execute_reply.started":"2024-07-11T02:33:12.529681Z","shell.execute_reply":"2024-07-11T02:33:17.936931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train.head(20)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:17.941969Z","iopub.execute_input":"2024-07-11T02:33:17.942301Z","iopub.status.idle":"2024-07-11T02:33:17.967951Z","shell.execute_reply.started":"2024-07-11T02:33:17.942275Z","shell.execute_reply":"2024-07-11T02:33:17.966736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE BEFORE DOWNCASTING\nprint('\\ntrain dataset data usage information before downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information before downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)\n\n\n#DOWNCASTING TRAIN DATASET\nfor column in df_train.columns:\n    if df_train[column].dtype == \"float64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"float\")\n    if df_train[column].dtype == \"int64\":\n        df_train[column]=pd.to_numeric(df_train[column], downcast=\"integer\")\n        \n#DOWNCASTING TEST DATASET\nfor column in df_test.columns:\n    if df_test[column].dtype == \"float64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"float\")\n    if df_test[column].dtype == \"int64\":\n        df_test[column]=pd.to_numeric(df_test[column], downcast=\"integer\")\n        \n#CHECKING TRAIN AND TEST DATASET MEMORY USAGE AFTER DOWNCASTING\nprint('train dataset data usage information after downcasting\\n')\ndf_train.info(memory_usage='deep',max_cols=1)\nprint('\\ntest dataset data usage information after downcasting\\n')\ndf_test.info(memory_usage='deep',max_cols=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:17.969232Z","iopub.execute_input":"2024-07-11T02:33:17.969575Z","iopub.status.idle":"2024-07-11T02:33:21.424862Z","shell.execute_reply.started":"2024-07-11T02:33:17.969539Z","shell.execute_reply":"2024-07-11T02:33:21.423697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Name of the column to be dropped\ncolumn_to_drop = 'Driving_License'\n\n# Drop the column from df_train\ndf_train.drop(columns=[column_to_drop], inplace=True)\n\n# Drop the column from df_test\ndf_test.drop(columns=[column_to_drop], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:21.426451Z","iopub.execute_input":"2024-07-11T02:33:21.426871Z","iopub.status.idle":"2024-07-11T02:33:22.075337Z","shell.execute_reply.started":"2024-07-11T02:33:21.426835Z","shell.execute_reply":"2024-07-11T02:33:22.074206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features = list(df_test.columns)\nX = df_train[features]\ny = df_train['Target']\nX_test = df_test[features]","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:22.076874Z","iopub.execute_input":"2024-07-11T02:33:22.077254Z","iopub.status.idle":"2024-07-11T02:33:22.687490Z","shell.execute_reply.started":"2024-07-11T02:33:22.077220Z","shell.execute_reply":"2024-07-11T02:33:22.686492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:22.688819Z","iopub.execute_input":"2024-07-11T02:33:22.689181Z","iopub.status.idle":"2024-07-11T02:33:25.266794Z","shell.execute_reply.started":"2024-07-11T02:33:22.689134Z","shell.execute_reply":"2024-07-11T02:33:25.265499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_sub_train, X_sub_val, y_sub_train, y_sub_val = get_subsample(df_train, 'Target')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:25.268202Z","iopub.execute_input":"2024-07-11T02:33:25.268607Z","iopub.status.idle":"2024-07-11T02:33:29.214488Z","shell.execute_reply.started":"2024-07-11T02:33:25.268576Z","shell.execute_reply":"2024-07-11T02:33:29.213393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import lightgbm as lgb\nfrom hyperopt import STATUS_OK\nfrom sklearn.metrics import log_loss\n\ndef objective(params):\n    # Define the parameters for the LightGBM model\n    params = {\n        'boosting_type': 'gbdt',\n        'objective': 'binary',\n        'metric': 'binary_logloss',\n        'num_leaves': int(params['num_leaves']),\n        'learning_rate': params['learning_rate'],\n        'feature_fraction': params['feature_fraction'],\n        'bagging_fraction': params['bagging_fraction'],\n        'bagging_freq': int(params['bagging_freq']),\n        'min_child_samples': int(params['min_child_samples']),\n    }\n    \n    # Initialize the LightGBM classifier with the given parameters\n    model = lgb.LGBMClassifier(**params)\n    \n    # Train the model\n    model.fit(\n        X_sub_train, y_sub_train,\n        eval_set=[(X_sub_val, y_sub_val)],\n        callbacks=[lgb.early_stopping(stopping_rounds=10), lgb.log_evaluation(False)]\n    )\n\n    # Predict probabilities for the positive class (class 1)\n    y_pred_proba = model.predict_proba(X_sub_val)[:, 1]\n\n    # Calculate the log loss, which is appropriate for probabilistic outputs\n    loss = log_loss(y_sub_val, y_pred_proba)\n    \n    return {'loss': loss, 'status': STATUS_OK}\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:29.215916Z","iopub.execute_input":"2024-07-11T02:33:29.216294Z","iopub.status.idle":"2024-07-11T02:33:29.226214Z","shell.execute_reply.started":"2024-07-11T02:33:29.216262Z","shell.execute_reply":"2024-07-11T02:33:29.224906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"space = {\n    'num_leaves': hp.quniform('num_leaves', 20, 150, 1),\n    'learning_rate': hp.uniform('learning_rate', 0.01, 0.3),\n    'feature_fraction': hp.uniform('feature_fraction', 0.5, 1.0),\n    'bagging_fraction': hp.uniform('bagging_fraction', 0.5, 1.0),\n    'bagging_freq': hp.quniform('bagging_freq', 1, 10, 1),\n    'min_child_samples': hp.quniform('min_child_samples', 5, 50, 1),\n}\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:29.227744Z","iopub.execute_input":"2024-07-11T02:33:29.228204Z","iopub.status.idle":"2024-07-11T02:33:29.250322Z","shell.execute_reply.started":"2024-07-11T02:33:29.228163Z","shell.execute_reply":"2024-07-11T02:33:29.248949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trials = Trials()\nbest = fmin(fn=objective,\n            space=space,\n            algo=tpe.suggest,\n            max_evals=25,\n            trials=trials)\n\nprint(\"Best hyperparameters:\", best)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:33:29.251848Z","iopub.execute_input":"2024-07-11T02:33:29.252265Z","iopub.status.idle":"2024-07-11T02:43:54.937906Z","shell.execute_reply.started":"2024-07-11T02:33:29.252227Z","shell.execute_reply":"2024-07-11T02:43:54.936428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the final model with the best hyperparameters\nbest_params = {\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'num_leaves': int(best['num_leaves']),\n    'learning_rate': best['learning_rate'],\n    'feature_fraction': best['feature_fraction'],\n    'bagging_fraction': best['bagging_fraction'],\n    'bagging_freq': int(best['bagging_freq']),\n    'min_child_samples': int(best['min_child_samples']),\n}","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:43:54.940061Z","iopub.execute_input":"2024-07-11T02:43:54.940554Z","iopub.status.idle":"2024-07-11T02:43:54.948851Z","shell.execute_reply.started":"2024-07-11T02:43:54.940506Z","shell.execute_reply":"2024-07-11T02:43:54.947494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"clf = lgb.LGBMClassifier(\n    boosting_type=best_params['boosting_type'],\n    objective=best_params['objective'],\n    metric=best_params['metric'],\n    num_leaves=best_params['num_leaves'],\n    learning_rate=best_params['learning_rate'],\n    feature_fraction=best_params['feature_fraction'],\n    bagging_fraction=best_params['bagging_fraction'],\n    bagging_freq=best_params['bagging_freq'],\n    min_child_samples=best_params['min_child_samples']\n    )\nclf.fit(\n    X_train, y_train,\n    eval_set=[(X_val, y_val)],\n    callbacks=[early_stopping(stopping_rounds=10), log_evaluation(False)] )","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:43:54.950564Z","iopub.execute_input":"2024-07-11T02:43:54.951559Z","iopub.status.idle":"2024-07-11T02:47:22.600196Z","shell.execute_reply.started":"2024-07-11T02:43:54.951517Z","shell.execute_reply":"2024-07-11T02:47:22.598914Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_proba = clf.predict_proba(X_test)[:, 1]  # Get the probabilities for the positive class","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:47:22.601667Z","iopub.execute_input":"2024-07-11T02:47:22.602021Z","iopub.status.idle":"2024-07-11T02:48:21.338574Z","shell.execute_reply.started":"2024-07-11T02:47:22.601986Z","shell.execute_reply":"2024-07-11T02:48:21.337256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save the predictions to a CSV file\nlgb_result = pd.DataFrame(X_test.index)\nlgb_result['Response'] = y_pred_proba\nlgb_result.to_csv('submission.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:48:21.340285Z","iopub.execute_input":"2024-07-11T02:48:21.340648Z","iopub.status.idle":"2024-07-11T02:48:48.000537Z","shell.execute_reply.started":"2024-07-11T02:48:21.340616Z","shell.execute_reply":"2024-07-11T02:48:47.999626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgb_result_pie = lgb_result.rename(columns={'Response': 'Target'})\n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:50:24.573413Z","iopub.execute_input":"2024-07-11T02:50:24.574505Z","iopub.status.idle":"2024-07-11T02:50:24.631937Z","shell.execute_reply.started":"2024-07-11T02:50:24.574456Z","shell.execute_reply":"2024-07-11T02:50:24.630970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_pie(lgb_result_pie)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T02:50:28.900482Z","iopub.execute_input":"2024-07-11T02:50:28.901199Z","iopub.status.idle":"2024-07-11T02:51:52.010423Z","shell.execute_reply.started":"2024-07-11T02:50:28.901161Z","shell.execute_reply":"2024-07-11T02:51:52.008501Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}